# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: 代码编译测试

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  pull-requests: read


jobs:
  golangci-ubuntu:
    name: golangci-ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53
  golangci-macos:
    name: golangci-macos
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53
  golangci-windows:
    name: golangci-windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53


  build-test:
    runs-on: ubuntu-latest
    needs: [golangci-ubuntu, golangci-macos, golangci-windows]
    strategy:
      matrix:
        go: ['1.19', '1.20','stable' ]
    name: Go ${{ matrix.go }} sample
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
        check-latest: true

    - name: Get Git Commit Log
      id: git-commit-log
      run: echo "GIT_COMMIT_LOG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time
      with:
        format: YYYYMMDD-HH
        utcOffset: "+08:00"

    - name: Get Build Time
      id: build-time
      run: echo "BUILD_TIME=${{ steps.current-time.outputs.readableTime }}" >> $GITHUB_ENV

    - name: Print Environment Variables
      run: |
        echo "${{env.GIT_COMMIT_LOG}}"
        echo "${{env.BUILD_TIME}}"

    - name: Go Build Binary - Windows amd64
      run: |
        GOOS=windows GOARCH=amd64 go build
        pwd

  go-test:
    runs-on: ubuntu-latest
    needs: [build-test]
    strategy:
      matrix:
        go: ['1.19', '1.20','stable' ]
    name: Go ${{ matrix.go }} sample
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
        check-latest: true

    - name: Get Git Commit Log
      id: git-commit-log
      run: echo "GIT_COMMIT_LOG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time
      with:
        format: YYYYMMDD-HH
        utcOffset: "+08:00"

    - name: Get Build Time
      id: build-time
      run: echo "BUILD_TIME=${{ steps.current-time.outputs.readableTime }}" >> $GITHUB_ENV

    - name: Print Environment Variables
      run: |
        echo "${{env.GIT_COMMIT_LOG}}"
        echo "${{env.BUILD_TIME}}"

    - name: Go Test
      run: |
        go test -v ./g_test -tag=v0.5.1 -baseurl=http://120.24.211.49:10441
        pwd