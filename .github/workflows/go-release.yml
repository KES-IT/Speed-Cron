name: build-go-binary

on:
  release:
    types: [created] # 表示在创建新的 Release 时触发

jobs:
  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          config: git-cliff/cliff.toml
          args: -vv --latest --strip 'footer'
        env:
          OUTPUT: CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.git-cliff.outputs.content }}
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}


  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.19', '1.20','stable' ]
    name: Go ${{ matrix.go }} sample
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true

      - name: Get Git Commit Log
        id: git-commit-log
        run: echo "GIT_COMMIT_LOG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HH
          utcOffset: "+08:00"

      - name: Get Build Time
        id: build-time
        run: echo "BUILD_TIME=${{ steps.current-time.outputs.readableTime }}" >> $GITHUB_ENV

      - name: Print Environment Variables
        run: |
          echo "${{env.GIT_COMMIT_LOG}}"
          echo "${{env.BUILD_TIME}}"

      - name: Go Build Binary - Windows amd64
        run: |
          GOOS=windows GOARCH=amd64 go build
          pwd

  go-build-last-test:
    runs-on: self-hosted
    needs: [changelog, build-test]
    environment: production
    name: Self-hosted Windows Go 1.20 go-build-last-test
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        cache: false

    - name: Go Test
      run: |
        go test -v ./g_test -tag="@test" -baseurl="${{ secrets.BACKEND_URL }}"
        pwd
  

  build-go-binary:
    runs-on: ubuntu-latest
    needs: go-build-last-test
    steps:
      - name: Get version
        id: get_version
        run: echo "CURRENT_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: wangyoucao577/go-release-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # 一个默认的变量，用来实现往 Release 中添加文件
          goos: windows
          goarch: amd64
          ldflags: -X "main.GitTag=${{ env.CURRENT_VERSION }}" -X "main.BackendBaseUrl=${{ secrets.BACKEND_URL }}"       # 通过 ldflags 注入版本号
          pre_command: export CGO_ENABLED=0 && export GODEBUG=http2client=0
          overwrite: true
          asset_name: "speed_cron_${{ matrix.goos }}_${{ matrix.goarch }}" # 可以指定二进制文件的名称
          compress_assets: OFF # 可以指定是否压缩二进制文件
          
